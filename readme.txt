컴파일 순서
1. save_video
2. change_to_image
3. image_label_to_pickle
4. keras_CNN_cam
5. model_to_predic

기본설정
1. 비디오는 0번 카메라로 찍습니다.
2. tensorflow, keras, cv2, sklearn, pickle이 사용가능해야합니다. (anaconda)
3. 기본설정 픽셀은 (64, 64) 입니다. image_label_to_pickle에서 변환 가능합니다. 크기 변환시 model_to_predic에도 반드시 변환 시켜줘야합니다.
4. 모든 파일들은 한 폴더에 저장되어 있어야 합니다. 각각의 파일들은 새로운 폴더를 만들 수도 있습니다. 만들어진 폴더의 이름을 바꾸지 말아주세요.
5. ipython이나 pycham환경에서 컴파일해주세요.

각 파일 설명
1. 영상을 저장합니다. 컴파일 전에 파일 이름을 바꾸지 않으면 디폴트로 video.mp4로 저장됩니다.
2. 저장 된 영상을 FRAME_COUNT 마다 잘라서 저장합니다. imagefolder를 만들어 저장합니다. 각기 다른 동영상 파일들도 FILE_NAME만 바꿔주면 인덱스를 지정하여 같은 폴더에 저장해줍니다.
3. 저장 된 사진으로부터 라벨링 작업을 시작합니다. CNN에 넣을 사진의 크기를 설정합니다. 디폴트는 (64, 64)입니다.
컴파일을 하면 먼저 클래스의 개수를 물어봅니다. 그 후 각각의 클래스의 내용을 넣어줍니다. 완성 후 한장씩 사진이 올라옵니다.
만약 라벨링을 하지 않을 사진이라면 esc를 눌러주세요 지나갑니다. 저장된 사진은 sklearn의 train_test_split을 이용하여 train과 test로 자동으로 나뉘어 들어갑니다.(30퍼센트)
라벨링을 한다면 esc를 제외한 아무키나 눌러주세요. 그 후 0~class_num - 1까지의 인덱스 중 한개를 넣어줍니다.
모든 사진에 대해 완성한다면 사진의 넘파이어레이, 라벨링, 클래스 이름을 딕셔너리로 모아서 파이썬 피클로 만들어 pic.bin에 저장합니다.
4. 배치 사이즈, 에폭, 저장할 모델 이름등을 설정해주세요. camCNN은 4개의 합성곱 레이어와 2개의 맥스풀링 2개의 어파인 레이어, 3개의 드룹아웃 레이어로 이루어져있습니다.
최적화는 adagrad(학습률 감소법)(주석을 바꿔주면 adam도 사용가능), 로스펑션은 교차엔트로피이며 마지막을 제외한 모든 활성화함수는 relu입니다. keras의 기본 평가 함수를 통해 정확도를 알려줍니다.
학습이 잘 안될경우 adagrad의 러닝레이트를 낮춰주세요.
5. 저장된 모델을 이용하여 새로운 사진을 받아 무엇인지 알려줍니다. FILE_NAME에 알아볼 사진의 절대경로를 넣어주세요.
컴파일 하면 넣어준 사진이 먼저 화면에 올라옵니다. 키보드의 아무키나 누르면 콘솔창에 그 사진이 무엇인지 알려줍니다.

#정리
keras의 기본적인 도구들을 이용해서 만들었습니다. 제 가족들 영상으로 실험했을 때는 20에폭 내외에서도 90퍼센트의 정확도를 보였습니다.
사진의 크기를 작게 한것과 레이어를 복잡하지 않게 한 것은 제 노트북의 성능상 한계 때문입니다. 
구글 텐서플로 object_detection API를 적용하면(ssd_mobilenet등) 아주 빠르고 완벽하게 사각형 처리까지 하여 오브젝트 디텍션을 할 수 있었겠지만. 현재는 제가 바닥부터 ssd를 구현할 
수 없다고 생각해서 제가 바닥부터 완벽히 이해하고 있는 기본CNN을 이용했습니다. 구글의 API들은 시간을 들여서 계속 공부해 나갈 것입니다, 앞으로 더 열심히 배울 준비가 되어있습니다.

#참고자료
Deep learning from scratch, learning tensorflow (한빛미디어)
opencv 프로그래밍 (GM)
keras tutorial  (https://keras.io)